openapi: 3.0.3
info:
  title: Hotel Booking API
  description: API for hotel room booking system
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Conflict:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
      required:
        - code
        - message

    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
        roomNumber:
          type: string
        type:
          type: string
          enum: [STANDARD, DELUXE, SUITE]
          description: Room type (corresponds to ROOM_TYPE_* in protobuf)
        price:
          type: number
          format: float
        capacity:
          type: integer
          minimum: 1
        status:
          type: string
          enum: [AVAILABLE, REPAIR, MAINTENANCE, OUT_OF_SERVICE]
          description: Room status (corresponds to ROOM_STATUS_* in protobuf)
        amenities:
          type: array
          items:
            type: string
      required:
        - id
        - roomNumber
        - type
        - price
        - capacity
        - status

    RegisterRequest:
      type: object
      required:
        - email
        - password
        - firstName
        - lastName
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        user:
          $ref: '#/components/schemas/UserInfo'

    UserInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        role:
          type: string
          enum: [ USER, ADMIN ]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /api/v1/bookings/available-rooms:
    get:
      summary: Get available rooms for booking
      description: Returns list of available rooms based on search criteria and current bookings
      operationId: getAvailableRooms
      tags:
        - bookings
      parameters:
        - name: checkIn
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Check-in date in YYYY-MM-DD format
          example: "2024-11-20"
        - name: checkOut
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Check-out date in YYYY-MM-DD format
          example: "2024-11-24"
        - name: capacity
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: Minimum room capacity
          example: 1
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [STANDARD, DELUXE, SUITE]
          description: Room type filter
          example: "STANDARD"
      responses:
        '200':
          description: List of available rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
              example:
                - id: "123e4567-e89b-12d3-a456-426614174000"
                  roomNumber: "101"
                  type: "STANDARD"
                  price: 100.00
                  capacity: 2
                  status: "AVAILABLE"
                  amenities: [ "WiFi", "TV" ]
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "INVALID_INPUT"
                message: "Invalid check-in date format"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "INTERNAL_ERROR"
                message: "Internal server error"
  /api/v1/bookings:
    post:
      tags:
        - bookings
      summary: Create a new booking
      security:
        - bearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - roomId
                - checkIn
                - checkOut
                - guestName
                - guestEmail
              properties:
                roomId:
                  type: string
                  format: uuid
                checkIn:
                  type: string
                  format: date
                checkOut:
                  type: string
                  format: date
                guestName:
                  type: string
                  minLength: 2
                guestEmail:
                  type: string
                  format: email
                guestPhone:
                  type: string
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  roomId:
                    type: string
                    format: uuid
                  userInfo:
                    $ref: '#/components/schemas/UserInfo'
                  status:
                    type: string
                    enum: [ PENDING ]
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  /api/v1/auth/register:
    post:
      tags:
        - auth
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v1/auth/login:
    post:
      tags:
        - auth
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v1/auth/refresh:
    post:
      tags:
        - auth
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Tokens successfully refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalError'