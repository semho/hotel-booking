openapi: 3.0.3
info:
  title: Hotel Booking API
  description: API for hotel room booking system
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message
      required:
        - code
        - message

    Room:
      type: object
      properties:
        id:
          type: string
          format: uuid
        roomNumber:
          type: string
        type:
          type: string
          enum: [STANDARD, DELUXE, SUITE]
          description: Room type (corresponds to ROOM_TYPE_* in protobuf)
        price:
          type: number
          format: float
        capacity:
          type: integer
          minimum: 1
        status:
          type: string
          enum: [AVAILABLE, REPAIR, MAINTENANCE, OUT_OF_SERVICE]
          description: Room status (corresponds to ROOM_STATUS_* in protobuf)
        amenities:
          type: array
          items:
            type: string
      required:
        - id
        - roomNumber
        - type
        - price
        - capacity
        - status

    Booking:
      type: object
      properties:
        id:
          type: string
          format: uuid
        roomId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        guestName:
          type: string
        guestEmail:
          type: string
          format: email
        guestPhone:
          type: string
        checkIn:
          type: string
          format: date
        checkOut:
          type: string
          format: date
        status:
          type: string
          enum: [PENDING, CONFIRMED, CANCELLED, COMPLETED]
        totalPrice:
          type: number
          format: float
        createdAt:
          type: string
          format: date-time
      required:
        - roomId
        - guestName
        - guestEmail
        - checkIn
        - checkOut

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        phone:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - email
        - firstName
        - lastName

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
        expiresIn:
          type: integer
          description: Token expiration time in seconds
      required:
        - accessToken
        - refreshToken
        - expiresIn

paths:
  /api/v1/bookings/available-rooms:
    get:
      summary: Get available rooms for booking
      description: Returns list of available rooms based on search criteria and current bookings
      operationId: getAvailableRooms
      tags:
        - bookings
      parameters:
        - name: checkIn
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Check-in date in YYYY-MM-DD format
          example: "2024-11-20"
        - name: checkOut
          in: query
          required: true
          schema:
            type: string
            format: date
          description: Check-out date in YYYY-MM-DD format
          example: "2024-11-24"
        - name: capacity
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
          description: Minimum room capacity
          example: 1
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum: [STANDARD, DELUXE, SUITE]
          description: Room type filter
          example: "STANDARD"
      responses:
        '200':
          description: List of available rooms
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
              example:
                - id: "123e4567-e89b-12d3-a456-426614174000"
                  roomNumber: "101"
                  type: "STANDARD"
                  price: 100.00
                  capacity: 2
                  status: "AVAILABLE"
                  amenities: [ "WiFi", "TV" ]
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "INVALID_INPUT"
                message: "Invalid check-in date format"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: "INTERNAL_ERROR"
                message: "Internal server error"

  /bookings:
    post:
      summary: Create a new booking
      description: Creates a new booking for a room
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roomId:
                  type: string
                  format: uuid
                guestName:
                  type: string
                  minLength: 2
                guestEmail:
                  type: string
                  format: email
                guestPhone:
                  type: string
                checkIn:
                  type: string
                  format: date
                checkOut:
                  type: string
                  format: date
              required:
                - roomId
                - guestName
                - guestEmail
                - checkIn
                - checkOut
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Room not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Room already booked
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      summary: Register a new user
      description: Create a new user account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                firstName:
                  type: string
                  minLength: 2
                lastName:
                  type: string
                  minLength: 2
                phone:
                  type: string
              required:
                - email
                - password
                - firstName
                - lastName
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: User login
      description: Authenticate user and get access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
              required:
                - email
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'