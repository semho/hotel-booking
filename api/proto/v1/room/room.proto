syntax = "proto3";

package hotel.room.v1;

option go_package = "github.com/semho/hotel-booking/pkg/proto/room_v1/room";

import "google/api/annotations.proto";

// Room service definition
service RoomService {
  // GetAvailableRooms returns list of available rooms based on search criteria
  rpc GetAvailableRooms(GetAvailableRoomsRequest) returns (GetAvailableRoomsResponse) {
    option (google.api.http) = {
      get: "/api/v1/rooms"
    };
  }

  rpc CreateRoom(CreateRoomRequest) returns (CreateRoomResponse) {
    option (google.api.http) = {
      post: "/api/v1/rooms"
    };
  }

  rpc GetRoomsCount(GetAvailableRoomsRequest) returns (GetRoomsCountResponse) {
    option (google.api.http) = {
      get: "/api/v1/rooms/count"
    };
  }

  rpc GetRoom(GetRoomRequest) returns (GetRoomResponse) {
    option (google.api.http) = {
      get: "/api/v1/rooms/{id}"
    };
  }

  rpc GetFirstAvailableRoom(GetAvailableRoomsRequest) returns (GetRoomResponse) {
    option (google.api.http) = {
      get: "/api/v1/rooms/first-available"
    };
  }
}

// Room type enumeration
enum RoomType {
  ROOM_TYPE_UNSPECIFIED = 0;
  ROOM_TYPE_STANDARD = 1;
  ROOM_TYPE_DELUXE = 2;
  ROOM_TYPE_SUITE = 3;
}

// Room status enumeration
enum RoomStatus {
  ROOM_STATUS_UNSPECIFIED = 0;
  ROOM_STATUS_AVAILABLE = 1; // Готова к заселению
  ROOM_STATUS_REPAIR = 2; // Ремонт
  ROOM_STATUS_MAINTENANCE = 3; // Уборка
  ROOM_STATUS_OUT_OF_SERVICE = 4; // Выведена из эксплуатации
}

// Room representation
message Room {
  string id = 1;
  string room_number = 2;
  RoomType type = 3;
  string price = 4;
  int32 capacity = 5;
  RoomStatus status = 6;
  repeated string amenities = 7;
}

// Request for getting available rooms
message GetAvailableRoomsRequest {
  optional int32 capacity = 1;
  optional RoomType type = 2;
  optional RoomStatus status = 3;
}

// Response with available rooms
message GetAvailableRoomsResponse {
  repeated Room rooms = 1;
}

// Request for creating a room
message CreateRoomRequest {
  string room_number = 1; // Номер комнаты
  RoomType type = 2;      // Тип комнаты
  string price = 3;       // Цена комнаты (в формате строки для поддержки DECIMAL)
  int32 capacity = 4;     // Вместимость
  RoomStatus status = 5;  // Статус комнаты
  repeated string amenities = 6; // Удобства
}

// Response after creating a room
message CreateRoomResponse {
  Room room = 1; // Созданная комната
}

message GetRoomsCountResponse {
  int32 count = 1;
}

// Request for getting room by ID
message GetRoomRequest {
  string id = 1;  // Room ID
}

// Response with room information
message GetRoomResponse {
  Room room = 1;  // Room data
}